package org.cvte.research.faceapi.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.swee1.pengyouquan.domain.FriendBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "friend".
*/
public class FriendBeanDao extends AbstractDao<FriendBean, Long> {

    public static final String TABLENAME = "friend";

    /**
     * Properties of entity FriendBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "user_id");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "nick_name");
        public final static Property Phone = new Property(3, String.class, "phone", false, "phone");
        public final static Property Address = new Property(4, String.class, "address", false, "address");
        public final static Property Deleted = new Property(5, boolean.class, "deleted", false, "deleted");
        public final static Property Desc = new Property(6, String.class, "desc", false, "desc");
        public final static Property MarkName = new Property(7, String.class, "markName", false, "mark_name");
        public final static Property ForbiddenVisitPengYouQuan = new Property(8, boolean.class, "forbiddenVisitPengYouQuan", false, "forbidden_visit_peng_you_quan");
        public final static Property PengYouQuanDayLimitDesc = new Property(9, String.class, "pengYouQuanDayLimitDesc", false, "peng_you_quan_day_limit_desc");
        public final static Property PengYouQuanContent = new Property(10, String.class, "pengYouQuanContent", false, "peng_you_quan_content");
        public final static Property XiangQingContent = new Property(11, String.class, "xiangQingContent", false, "xiang_qing_content");
    }


    public FriendBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FriendBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"friend\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"user_id\" TEXT," + // 1: userId
                "\"nick_name\" TEXT," + // 2: nickName
                "\"phone\" TEXT," + // 3: phone
                "\"address\" TEXT," + // 4: address
                "\"deleted\" INTEGER NOT NULL ," + // 5: deleted
                "\"desc\" TEXT," + // 6: desc
                "\"mark_name\" TEXT," + // 7: markName
                "\"forbidden_visit_peng_you_quan\" INTEGER NOT NULL ," + // 8: forbiddenVisitPengYouQuan
                "\"peng_you_quan_day_limit_desc\" TEXT," + // 9: pengYouQuanDayLimitDesc
                "\"peng_you_quan_content\" TEXT," + // 10: pengYouQuanContent
                "\"xiang_qing_content\" TEXT);"); // 11: xiangQingContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"friend\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
        stmt.bindLong(6, entity.getDeleted() ? 1L: 0L);
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
 
        String markName = entity.getMarkName();
        if (markName != null) {
            stmt.bindString(8, markName);
        }
        stmt.bindLong(9, entity.getForbiddenVisitPengYouQuan() ? 1L: 0L);
 
        String pengYouQuanDayLimitDesc = entity.getPengYouQuanDayLimitDesc();
        if (pengYouQuanDayLimitDesc != null) {
            stmt.bindString(10, pengYouQuanDayLimitDesc);
        }
 
        String pengYouQuanContent = entity.getPengYouQuanContent();
        if (pengYouQuanContent != null) {
            stmt.bindString(11, pengYouQuanContent);
        }
 
        String xiangQingContent = entity.getXiangQingContent();
        if (xiangQingContent != null) {
            stmt.bindString(12, xiangQingContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
        stmt.bindLong(6, entity.getDeleted() ? 1L: 0L);
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(7, desc);
        }
 
        String markName = entity.getMarkName();
        if (markName != null) {
            stmt.bindString(8, markName);
        }
        stmt.bindLong(9, entity.getForbiddenVisitPengYouQuan() ? 1L: 0L);
 
        String pengYouQuanDayLimitDesc = entity.getPengYouQuanDayLimitDesc();
        if (pengYouQuanDayLimitDesc != null) {
            stmt.bindString(10, pengYouQuanDayLimitDesc);
        }
 
        String pengYouQuanContent = entity.getPengYouQuanContent();
        if (pengYouQuanContent != null) {
            stmt.bindString(11, pengYouQuanContent);
        }
 
        String xiangQingContent = entity.getXiangQingContent();
        if (xiangQingContent != null) {
            stmt.bindString(12, xiangQingContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FriendBean readEntity(Cursor cursor, int offset) {
        FriendBean entity = new FriendBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.getShort(offset + 5) != 0, // deleted
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // desc
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // markName
            cursor.getShort(offset + 8) != 0, // forbiddenVisitPengYouQuan
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pengYouQuanDayLimitDesc
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pengYouQuanContent
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // xiangQingContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeleted(cursor.getShort(offset + 5) != 0);
        entity.setDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMarkName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setForbiddenVisitPengYouQuan(cursor.getShort(offset + 8) != 0);
        entity.setPengYouQuanDayLimitDesc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPengYouQuanContent(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setXiangQingContent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
