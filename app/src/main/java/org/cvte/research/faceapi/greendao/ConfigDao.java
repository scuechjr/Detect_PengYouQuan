package org.cvte.research.faceapi.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.swee1.pengyouquan.domain.Config;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "config".
*/
public class ConfigDao extends AbstractDao<Config, Long> {

    public static final String TABLENAME = "config";

    /**
     * Properties of entity Config.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Integer.class, "type", false, "type");
        public final static Property Run = new Property(2, boolean.class, "run", false, "run");
        public final static Property StartMarkName = new Property(3, String.class, "startMarkName", false, "start_mark_name");
        public final static Property DeleteForbiddenVisitPengYouQuan = new Property(4, boolean.class, "deleteForbiddenVisitPengYouQuan", false, "delete_forbidden_visit_peng_you_quan");
    }


    public ConfigDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"config\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"type\" INTEGER," + // 1: type
                "\"run\" INTEGER NOT NULL ," + // 2: run
                "\"start_mark_name\" TEXT," + // 3: startMarkName
                "\"delete_forbidden_visit_peng_you_quan\" INTEGER NOT NULL );"); // 4: deleteForbiddenVisitPengYouQuan
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"config\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Config entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
        stmt.bindLong(3, entity.getRun() ? 1L: 0L);
 
        String startMarkName = entity.getStartMarkName();
        if (startMarkName != null) {
            stmt.bindString(4, startMarkName);
        }
        stmt.bindLong(5, entity.getDeleteForbiddenVisitPengYouQuan() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Config entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
        stmt.bindLong(3, entity.getRun() ? 1L: 0L);
 
        String startMarkName = entity.getStartMarkName();
        if (startMarkName != null) {
            stmt.bindString(4, startMarkName);
        }
        stmt.bindLong(5, entity.getDeleteForbiddenVisitPengYouQuan() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Config readEntity(Cursor cursor, int offset) {
        Config entity = new Config( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.getShort(offset + 2) != 0, // run
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startMarkName
            cursor.getShort(offset + 4) != 0 // deleteForbiddenVisitPengYouQuan
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Config entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRun(cursor.getShort(offset + 2) != 0);
        entity.setStartMarkName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeleteForbiddenVisitPengYouQuan(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Config entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Config entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Config entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
